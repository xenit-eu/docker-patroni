plugins {
    id 'eu.xenit.docker' version '4.0.3'
}

group 'eu.xenit.postgres'
version '0.1.0'

wrapper {
    version = '5.5'
    distributionType = Wrapper.DistributionType.ALL
}

apply plugin: 'java'

dependencies {
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.5.1'
    testCompile group: 'org.postgresql', name: 'postgresql', version: '42.2.6'
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.5.1')
    testRuntime('org.junit.vintage:junit-vintage-engine:5.5.1')
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

def patroni_version = '1.5.6'
def patroni_tgz = "patroni_v${patroni_version}.tgz"

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
task createDockerFile(type: Dockerfile){
    from 'xeniteu/postgres:11.4'
    copyFile    'docker-entrypoint.sh', '/'
    runCommand  "apt-get update && apt-get install -y python3-pip python3-dev g++ curl musl-dev postgresql-server-dev-10 postgresql-common gosu && " +
                "ln -sf /usr/bin/python3 /usr/bin/python && " +
                "rm -r /usr/lib/python*/ensurepip && " +
                "python3 -m pip install --upgrade pip setuptools && " +
                "python3 -m pip install psycopg2 pyyaml python-dateutil pytz requests python-consul click tzlocal prettytable psutil && " +
                "curl -o /tmp/${patroni_tgz} -L https://github.com/zalando/patroni/archive/v${patroni_version}.tar.gz && " +
                'cd /tmp && ' +
                "tar -xzf ${patroni_tgz} && " +
                "mv patroni-${patroni_version}/patroni /patroni && " +
                "mv patroni-${patroni_version}/patroni.py / && " +
                "mv patroni-${patroni_version}/patronictl.py / && " +
                "ln -s /patronictl.py /usr/local/bin/patronictl && " +
                "rm -rf patroni* && " +
                "rm -r /root/.cache && " +
                "rm -rf /usr/lib/python3*/__pycache && " +
                "apt-get remove -y g++ python3-dev curl musl-dev && apt autoremove -y && apt-get purge && " +
                'chmod +x /docker-entrypoint.sh'
    entryPoint  '/docker-entrypoint.sh'
}

task copyEntrypoint(type: Copy){
    from 'docker-entrypoint.sh'
    into createDockerFile.destFile.parent
}

dockerFile {
    dockerFile = createDockerFile.destFile
    dockerBuild {
        repository = 'hub.xenit.eu/patroni'
        automaticTags = true
    }
}

afterEvaluate {
    buildDockerImage.dependsOn(createDockerFile)
    buildDockerImage.dependsOn(copyEntrypoint)
}

test {
    dependsOn composeUp
    useJUnitPlatform()
    outputs.upToDateWhen { false }
    doFirst {
        def ipAddress = project.dockerCompose.servicesInfos.postgresql.getFirstContainer().getHost()
        def port = project.dockerCompose.servicesInfos.postgresql.getFirstContainer().getPorts().getAt(5432)
        systemProperty("connectionString", "jdbc:postgresql://${ipAddress}:${port}/postgres")
        systemProperty("postgres.username", "postgres")
        systemProperty("postgres.password", "postgres")
    }
    finalizedBy(composeDown)
}